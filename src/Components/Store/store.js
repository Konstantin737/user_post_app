import {  legacy_createStore as createStore } from "redux";
// import DataAPI from '../../ServerData/DataAPI';
import { postList, usersList } from "../../ServerData/DataAPI";

// const postList = await DataAPI.getPosts()

// const usersList = await DataAPI.getUsers()


const initialState = {
   user:{
      firstName: 'Константин',
      middleName: 'Александрович',
      lastName: 'Самарцев',
      email: 'samarcev737@yandex.ru',
      site: 'http://site.skilbe.ru'
   },
   courses: [
      'HTML и СSS Уровень 1 - 3. Специалист при МГТУ им. Баумана, Web-верстка',
      'Современный JavaScript с нуля до junior специалиста. Udemy, Frontend-разработчик',
      'Современный React с Нуля. Udemy, Frontend-разработчик',
      'Полный курс по JavaScript + React - с нуля до результата. Udemy, Frontend-разработчик',
      'React - Полный курс по React + hook Context API (2022). Udemy, Frontend-разработчик',
      'Redux - для управления состоянием React-приложений (2022). Udemy, Frontend-разработчик'
   ],
   gitHub: 'https://github.com/Konstantin737?tab=repositories',
   codeWars: 'https://www.codewars.com/users/Samarcev737',
   data: postList,
   dataUsers: usersList,
   challenge: <div style={{marginLeft:'20px'}}><span>Необходимо реализовать SPA (single page application) на React.<br/>
   Ключевые технологии, которые необходимо использовать:<br/>
   React<br/>
   React-bootstrap<br/>
   React-router<br/>
   Axios<br/>
   Redux<br/>
   Redux-saga<br/>
   Git<br/><br/>
   Описание задачи:<br/>
   Нужно создать сайт с постами, где будут присутствовать 3 страницы (роута):<br/>
   1. Список постов (главная страница), где будут располагаться все посты.<br/>
   2. Обо мне, где будет располагаться краткая информация о Вас.<br/>
   3. Подробности о пользователе (куда необходимо вывести информацию о пользователе и список его постов)<br/>
   Получить данные необходимо через фейковое api https://jsonplaceholder.typicode.com.<br/><br/>
   Подробное описание:<br/>
   1. Список постов (главная страница)<br/>
   1.1. Должна содержать список всех постов<br/>
   1.2 Каждый пост состоит из заголовка, текста, аватара автора и списка комментариев<br/>
   1.3 Заголовок и текст брать из api<br/>
   1.4 Аватар должен быть одним изображением для всех пользователей, но при клике на него, должен происходить переход на страницу Подробности о пользователе.<br/>
   1.5 Список комментариев изначально скрыт, доступна лишь кнопка Комментарии<br/>
   1.6 При нажатии на кнопку Комментарии, должен грузиться из api и показываться список комментариев к данному посту. При повторном нажатии список должен скрываться<br/>
   1.7  Комментарий состоит из заголовка(email) и текста<br/>
   1.8. При загрузке данных с сервера нужно отобразить сперва лоадер, а только потом подгруженный контент (создайте дополнительно искусственную задержку в 0.5 секунд чтобы лоадер повисел подольше).<br/>
   1.9. Должен присутствовать хэдер с «меню-бургером». При нажатии на него слева должно всплывать навигационное меню, где будет присутствовать 2 ссылки (Список постов и Обо мне), а также отображаться ваш аватар, имя и почтовый адрес.<br/><br/>
   2. Обо мне<br/>
   2.1. Здесь всё просто, расскажите немного о себе. Сделайте эту страницу отдельным роутом, сохранив при этом хэдер и «меню-бургер».<br/>
   3. Подробности о пользователе (переход при нажатии по аватару у поста)<br/>
   3.1. Необходимо создать карточку, куда вывести краткую информацию о пользователе. Информация должна соответствовать автору поста.<br/>
   3.2 Отобразить список постов принадлежащих только данному пользователю, структура самих постов полностью идентична с п.1.2.<br/>
   3.3. Добавить лоадер по аналогии с п.1.8.<br/>
   3.4. Сделать кнопку «Назад», при нажатии на которую произойдет переход на главную страницу.<br/>
   </span></div>
}

const portfolio = ( state = initialState,
action) => {
   if(action.type==='GET_LIKE') {
      state.data.map(item=>item.id===action.id?item.like=!item.like:item.like)
      // console.log('Like', action.id, state.data[action.id-1]);
      console.log(state.data);
   }
   return state
}

//actions
export const getLike = (id) => ({
   type: 'GET_LIKE',
   id
})

export const storeUser = createStore(portfolio)

